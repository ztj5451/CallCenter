package com.callCenter.activity;

import java.io.InputStream;
import java.net.HttpURLConnection;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;

import com.callCenter.adapter.GwpfAdapter;
import com.callCenter.entity.Gwpf;
import com.callCenter.utils.HandlerException;
import com.callCenter.utils.HttpConnectUtil;
import com.callCenter.utils.SettingUtils;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.KeyEvent;
import android.view.View;
import android.view.Window;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;

/**
 * 待办公文
 * 
 * @author Administrator
 * 
 */
public class GWHandlerActivity extends Activity {
	private SettingUtils settingUtils;
	private List<Gwpf> gwpfList;
	private ListView gwpfListView;
	private GwpfAdapter adapter;
	private String uid, loginname;
	private Handler handler = new Handler() {
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case HandlerException.Success:
				adapter = new GwpfAdapter(GWHandlerActivity.this, gwpfList);
				gwpfListView.setAdapter(adapter);
				adapter.notifyDataSetChanged();
				break;
			case HandlerException.Fail:
				break;
			case HandlerException.HttpURLConnection_not_HTTP_OK:
				break;
			case HandlerException.IOException:
				break;
			default:

				break;
			}
		};
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.gwhandler);
		init();
		Event();

	}

	@Override
	protected void onStart() {
		// TODO Auto-generated method stub
		super.onStart();
		new Thread() {
			public void run() {
				gwpfAction(gwpfUrl(uid));
			};
		}.start();
	}

	private void init() {

		settingUtils = new SettingUtils(GWHandlerActivity.this);
		uid = getIntent().getExtras().getString("uid");
		loginname = getIntent().getExtras().getString("loginname");
		gwpfListView = (ListView) this.findViewById(R.id.gwpfListView);
	}

	// 按钮事件
	private void Event() {
		// 返回按钮
		this.findViewById(R.id.backBtn).setOnClickListener(
				new OnClickListener() {

					@Override
					public void onClick(View arg0) {
						GWHandlerActivity.this.finish();
						overridePendingTransition(R.anim.in_to_right,
								R.anim.out_from_left);

					}
				});
		// listView 点击
		gwpfListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> adapterView, View view,
					int position, long id) {
				String pfId = gwpfList.get(position).getId();
				String zt = gwpfList.get(position).getZt();
				if (zt.equals("0")) {
					Intent intent = new Intent(GWHandlerActivity.this,
							GwpfDetailActivity.class);
					intent.putExtra("pfId", pfId);
					intent.putExtra("uid", uid);
					intent.putExtra("loginname", loginname);
					startActivity(intent);
					overridePendingTransition(R.anim.in_from_right,
							R.anim.out_to_left);
				} else if (zt.equals("1")) {
					Toast.makeText(GWHandlerActivity.this, "该公文已被派发!",
							Toast.LENGTH_LONG).show();
				}

			}
		});

	}

	// 公文发起URL
	private StringBuffer gwpfUrl(String uid) {
		StringBuffer gwpfUrl = new StringBuffer(SettingUtils.get("serverIp"));
		gwpfUrl.append(SettingUtils.get("gwpf_list_url")).append("uid=")
				.append(uid);
		System.out.println("公文收发url:" + gwpfUrl);
		return gwpfUrl;
	}

	// 工单派发
	private void gwpfAction(StringBuffer gwpfUrl) {
		try {
			HttpURLConnection httpURLConnection = HttpConnectUtil.connect(
					gwpfUrl, "GET");
			if (httpURLConnection.getResponseCode() != HttpURLConnection.HTTP_OK) {
				handler.sendEmptyMessage(HandlerException.HttpURLConnection_not_HTTP_OK);
			} else {
				InputStream inputStream = httpURLConnection.getInputStream();
				String message = HttpConnectUtil.getHttpStream(inputStream);
				message = message.replaceAll("null", "");
				JSONObject object = new JSONObject(message);
				JSONArray array = new JSONArray(object.getString("contents"));
				if (array.length() != 0) {
					gwpfList = new ArrayList<Gwpf>();
					gwpfList.clear();
					for (int i = 0; i < array.length(); i++) {
						JSONObject obj = array.getJSONObject(i);
						Gwpf gwpf = new Gwpf();
						gwpf.setId(obj.getString("id"));
						gwpf.setKhName(obj.getString("kh_name"));
						gwpf.setStartTime(obj.getString("starttime"));
						gwpf.setTime(obj.getString("times"));
						gwpf.setZt(obj.getString("zt"));
						gwpf.setJibie(obj.getString("jibie"));
						gwpf.setCuiban(obj.getString("cuiban"));
						gwpf.setLsh(obj.getString("lsh"));
						gwpf.setJdbmname(obj.getString("jdbmname"));
						gwpf.setBs(obj.getString("bs"));
						gwpf.setTuidan(obj.getString("tuidan"));
						gwpfList.add(gwpf);
					}
					handler.sendEmptyMessage(HandlerException.Success);
				} else {
					handler.sendEmptyMessage(HandlerException.Fail);
				}

			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			handler.sendEmptyMessage(HandlerException.IOException);
		}
	}

	// 返回键
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			GWHandlerActivity.this.finish();
			overridePendingTransition(R.anim.in_to_right, R.anim.out_from_left);
		}
		return super.onKeyDown(keyCode, event);
	}
}
